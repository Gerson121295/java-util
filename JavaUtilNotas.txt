


-- Java y Java util --
 Collections, Wrappers y Lambda expressions

Todo esto se basa en diferentes estructuras de datos, como arreglos de datos, cuando 
tenemos varios datos de un solo tipo, varios objetos, podemos agruparlos en un objeto 
digamos un poco mayor, y a la vez trabajar con los métodos que heredamos de la clase 
object.

Wrappers son objetos que engloban otros objetos para aplicar técnicas de encapsulamiento 
y esconder los atributos propios de cada objeto también. 

¿Qué son lambda expressions?
es un tipo de funciones de programación, pero que se ejecutan en un contexto separado.

El paquete Java.lang, es el paquete pues donde están las principales clases de Java,
 como por ejemplo, clase object, clase string. Entonces, el paquete Java.lang no 
necesitamos ni siquiera importarlo. Porque automáticamente pues es la base de todo el lenguaje.

El paquete Java.util: n programación son llamados los utilitarios, que son estructuras 
de datos, son objetos que nos van a simplificar un poco la vida para realizar diferentes
operaciones.

El nombre de la variable args significa argumentos en plural, es una abreviación de arguments.


----------------------   01 Conociendo Arrays    ----------------------

//un array es un conjunto de datos en una misma estructura de datos, 
Para acceder a él yo necesito explicarle en qué índice está el valor al que yo deseo o 
acceder o guardar, en qué índice deseo yo guardar un valor.
El índice es la posición en el que está pues cada sección de mi caja. Muy importante. 
Los índices comienzan por 0.

        // Indice:        0   1   2   3
         //             | 1 | 2 | 3 | 4 |   --> dato

int [] edades = new int[5]; // Declaracion de Variable que engloba todas las edades, todo array debe tener un valor fijo.
edades[2] = 30;  //En el indice 2 se guada el valor 30.

 Objetos
¿Por qué referencias? Porque recordemos que las variables de los objetos son 
simplemente referencias a estos objetos en la memoria heap.

CuentaCorriente[] cuentas = new CuentaCorriente[5];


----------------   Guardando Referencias  ----------------

--  Cast Objetos #1
Los arrays son una estructura de datos en la que podemos almacenar varios valores, 
varias referencias a un mismo tipo de datos, a un mismo objeto, en la misma estructura.

Con el tipo object, de todas formas, está compilando todo mi código.
Porque object es el más absorbente de todos los objetos. 

castear objetos, castear significa indicarle a Java que estos objetos son del tipo que tú le estás indicando acá. 

int numero = 3;
double valor = numero; //cast implícito

int numero = 3;
double valor = (double) numero; //cast explícito

double valor = 3.56;
int numero = (int) valor; //cast explícito es exigido por el compilador


En las referencias, se aplica el mismo principio. Si el cast siempre funciona no es 
necesario hacerlo explícito, por ejemplo:

CuentaCorriente cc1 = new CuentaCorriente(22, 33);
Cuenta cuenta = cc1; //cast implícito

podría ser explícito, pero nuevamente, el compilador no lo requiere porque cualquier 
CuentaCorriente es una Cuenta:

CuentaCorriente cc1 = new CuentaCorriente(22, 33);
Cuenta Cuenta = (Cuenta) cc1; //cast explícito mas desnecessário



Una lista también es un conjunto de objetos que pueden ser del mismo tipo, pero es un 
conjunto de objetos agrupados en un objeto mayor, esa es una lista.

El ArrayList de Java.util el paquete Java.util se llama así: ArrayList lista = new ArrayList();
//<> Operador diamante

        //ArrayList nos permite usar diferentes metodos evitando
        //crear clases como la de GuardarCuentas o GuardarReferencias.
        //ArrayList todos los datos que se ingresan se guardan en orden como se ingresan en los indices
        

Las desventajas señaladas al usar arrays:
-El array tiene un tamaño fijo (no puede crecer dinámicamente): Una vez creada, el 
array siempre tendrá el mismo tamaño de elemento. Esto es muy malo cuando no sabemos 
exactamente cuántos elementos necesitamos conservar.

-El array no sabe cuántas posiciones están ocupadas (solo tamaño total): Ésta es una 
gran desventaja. No queremos saber cuántos elementos puede tener un array, sino cuántos 
elementos existen realmente en el array.

- Sintaxis fuera del estándar "OO Java":Los arrays tienen su propia sintaxis, lo que 
dificulta la lectura del código.



Ve las siguientes afirmaciones acerca de Arraylist.
A) Conserve las referencias.
B) Es del paquete java.util
C) Utiliza un array internamente
D) Al inicializar no es necesario definir el tamaño.

¿Cuántos elementos puede guardar un objeto de tipo java.util.ArrayList?
el único límite es la memoria de la JVM.


ArrayList<Cliente> lista = new ArrayList<Cliente>();
parametrizamos ArrayList usando <>. Hay una variación/simplificación que se incluyó 
en Java 1.7. El siguiente código es equivalente a la alternativa:

ArrayList<Cliente> lista = new ArrayList<>();

Aprendimos:
- Que la clase java.util.ArrayList encapsula el uso de array y ofrece varios métodos 
   de más alto nivel.
- Que una lista guarda referencias.
- Cómo usar los métodos size, get, remove.
- Cómo usar foreach para iterar a través de ArrayList.
- Que los generics parametrizan clases
- Que en el caso de ArrayList podemos definir el tipo de los elementos mediante 
  generics.


 -----------------    04. Equals y mas listas -----------------

-- Comparando Elementos
El método equals, junto con los métodos toString y hashCode, es uno de los métodos 
fundamentales de la clase Object.

¿Cuál es la firma correcta para este método? 
- public boolean equals(Object ref)
- es público, devuelve boolean y recibe un Objeto.

¿Qué es cierto sobre el método equals?
- Debemos sobreescribir para definir el criterio de igualdad.
Debemos sobreescribir el método equals para definir la igualdad del objeto.
En general, existen los métodos equals, toString y hashCode para sobreescribir.

- La implementación estándar compara las referencias.
La implementación del método equals de la clase Object compara solo las referencias.

- Está definido en la clase Object.


--Listas Anexadas: java.util.LinkedList

¿Y qué es el LinkedList o también llamado lista anexada? Lista anexada es otra 
estructura de datos.
Esto ya no es un array, pero también es una lista.
El LinkedList no es un arreglo, sino es un conjunto de objetos en el cual cada objeto 
que existe aquí sabe quién es su objeto anterior. 

Por ejemplo, cc1 conoce a cc2, él sabe que después de él sigue cc2, y cc2 conoce a cc1, 
tienen referencia entre ellos. Dentro de LinkedList él ya tiene referencias al 
siguiente nodo y al nodo anterior.



-----  Java.util


			 	    java.util.List
				   /  |	    |	  \
		java.util.ArrayList   |	    |	   java.util.Vector
				      |     |
				      |     java.util.LinkedList(lista anexada)
		    java.util.Collection


El paquete java.util es extremadamente importante en el desarrollo de Java. 
Al respecto podemos decir que:

- Todas las listas garantizan el orden de inserción.
 Las listas garantizan el orden de inserción. Esto significa que al iterar recibimos los
 elementos en el mismo orden en que fueron insertados.

-List es una interface, ArrayList y LinkedList son implementaciones.
-Todas las listas tienen un índice.
las listas siempre tienen un índice (podemos acceder al elemento a través de la posición).
Además, hay una característica más: la lista acepta elementos duplicados, pero hablaremos 
de eso un poco más adelante.

LinkedList y ArrayList son dos implementaciones diferentes de la interfaz List. 
LinkedList es una lista doblemente "enlazada" y ArrayList representa un array con 
redimensión de tamaño dinámico.

Características con las implementaciones::
ArrayList: 
- Acceso fácil y de rendimiento por el índice.
- Los elementos deben copiarse cuando no hay más capacidad.
LinkedList:
- Inserción y eliminación con performance en cualquier posición, también al inicio.
- Acceso más lento por el índice, es necesario investigar los elementos.


-------------------   05 Vector e Interfaz Collection -------------------
 Sobre Vector:
- Vector es threadsafe: Esta es la gran diferencia entre ArrayList y Vector.
- Vector también usa un array: como ArrayList, Vector también usa una matriz por debajo.
- Vector es una lista: Vector implementa la interfaz List.


-Superclase Collection:
Acerca de listas:
- Las listas son colecciones: cualquier lista también es una colección (java.util.Collection).
- Las listas garantizan el pedido de inserción: En la iteración los elementos aparecen en el orden de inserción.
- Las listas son secuencias(tienen índice): Todas las listas tienen un índice, es decir, son secuencias.

------------------- 06 Las Clases Wrappers ----------------------------------
los tipo de datos primitivos (int, char) guarda el valor que se le da al objeto
Un objeto como un String guarda la referencia de la memoria head























